package gui

import javafx.geometry.*
import javafx.scene.control.*
import java.lang.*
import javafx.scene.layout.*
import javafx.scene.control.TextArea
import javafx.geometry.Insets
import javafx.scene.layout.VBox
import javafx.scene.layout.HBox
import javafx.scene.control.Button
import javafx.scene.control.TitledPane
import javafx.scene.control.SplitPane
import javafx.collections.FXCollections
import gui.PrototypeController
import gui.supportclass.*
import javafx.scene.control.cell.PropertyValueFactory



component Prototype controlledby PrototypeController {
	
	TabPane id mainPane {
		tabClosingPolicy : "UNAVAILABLE",
		tabs : [
			Tab {
				text : "System Function",
				content : 
						BorderPane {
							
							left : Accordion id leftAccordion {
								expandedPane : "$customer", 
								panes : [
									TitledPane id customer {
										expanded : true,
										text : "Customer",
										content : TreeView<String> id actor_treeview_customer 
									},
									TitledPane id bankclerk {
										expanded : true,
										text : "BankClerk",
										content : TreeView<String> id actor_treeview_bankclerk 
									}
								]
							},
							
							bottom : VBox {
								children : [
									
									
									
									ToolBar {
										items : [
											Label {
												text : "Generated By RMCode"
											}
										]
									}			
								]
							
							},
							
							center : VBox {
								children : [
									TitledPane id operation_paras {
										text : "Operation Parameters",
										content : GridPane					
									},
									
									TitledPane id operation_return_pane {
										text : "Operation Return",	
										static vgrow : "ALWAYS",
										content : AnchorPane
									},
									TitledPane id log_pane{
										text : "System Log",
										static vgrow : "ALWAYS",	
										content : 	TextArea id log {	
											editable : false,
											text : ""
										}
									},
									SplitPane {
										orientation : "HORIZONTAL",
										dividerPositions : "0.5, 0.5",
										items : [
											Button id execute{																				
													text : "Execute",
													onAction : controllermethod execute
													
											},
											Button id reset {
													text : "Reset"
											}
										]
										
									}
								]
							},
							
							right : VBox {
							
								children : [
									TitledPane id definition_pane {
										text : "Definition",
										static vgrow : "ALWAYS",
										content : TextArea id definition {					
											text : ""
										}					
									},
									
									TitledPane id precondition_pane {
										text : "Precondition",
										static vgrow : "ALWAYS",
										content : TextArea id precondition {					
											text : ""
										}					
									},
									
									TitledPane id postcondition_pane {
										text : "Postcondition",	
									    static vgrow : "ALWAYS",										
										content : TextArea id postcondition {											
											text : ""
										}
									},

									TitledPane id invariants_panes {
										text : "Invariants",	
										static vgrow : "ALWAYS"
									}
								]
							}
							
						}
		
			},
			
			Tab {
				text : "System Status",			
				BorderPane {		
					     
						left : VBox {
							children : [
								
								TitledPane id status_left_pane_class {
								static vgrow : "ALWAYS",								
								text : "Class statistics",
								content : 
									TableView<ClassInfo> id class_statisic {
										columns : [
									    TableColumn<ClassInfo, String> id classname {
											editable : false,					
											text : "Class Name",
											cellValueFactory : PropertyValueFactory<ClassInfo, String> {
												property : "name"
											}							
											
										},
										TableColumn<ClassInfo, Integer> id num_objects {
											editable : false,
											text : "# of Objects",
											cellValueFactory : PropertyValueFactory<ClassInfo, Integer> {
												property : "number"
											}
										}]
							   		}									
						 	    },
						 	    TitledPane id status_left_pane_association {
								static vgrow : "ALWAYS",
								text : "Association statistics",
								content : 
									TableView id association_statisic {
										columns : [
										TableColumn id source_class {
											editable : false,
											text : "Source Class",
											cellValueFactory : PropertyValueFactory {
												property : "sourceClass"
											}
										},											
									    TableColumn id associatio_name {
											editable : false,					
											text : "Association Name",
											cellValueFactory : PropertyValueFactory {
												property : "associationName"
											}							
											
										},
										TableColumn id target_class {
											editable : false,
											text : "Target Class",
											cellValueFactory : PropertyValueFactory {
												property : "targetClass"
											}
										},
										TableColumn id isMultiple {
											editable : false,
											text : "Multiple",
											cellValueFactory : PropertyValueFactory {
												property : "isMultiple"
											}
										},
										TableColumn id association_number {
											editable : false,
											text : "Association Number",
											cellValueFactory : PropertyValueFactory {
												property : "number"
											}
										}										
										]
							   		}									
						 	 	}]
						},
							
							
						center : TitledPane id object_statics {
							text : "Object Statistics",
							maxHeight : "Infinity"
						},
						
						right : TitledPane id all_invariant_pane {
								text : "All Invariants"													
						},
						  	
					    bottom : ToolBar {
							items : [
								Button {							
									text : "Load Status",
									onAction : controllermethod load
								},
								Button {
									text : "Save Status",
									onAction : controllermethod save
								},
								Button {
									text : "Refresh Status",
									onAction : controllermethod refresh
								},
								Button {
									text : "Check All Invariants",
									onAction : controllermethod checkAllInvariants
								}								
							]
						 }	
					}		
			}
		]
	}
}	
